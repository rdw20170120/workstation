#!/usr/bin/env bash
# Intended to be executed in a Bash shell.
[[ -n "${BO_Trace}" ]] && 1>&2 echo "Executing ${BASH_SOURCE}" && [[ "${BO_Trace}" != 'TRACE' ]] && set -vx
# NO: set -e
trap warn_on_error EXIT
###############################################################################
# Hunt for all interesting phrases in stable project directories

script=$(which grep_stable_projects_for_phrase)
if [[ -z "$script" ]] ; then
  echo "FATAL: Missing script '$script', aborting"
  exit
elif [[ ! -r "$script" ]] ; then
  echo "FATAL: Unreadable script '$script', aborting"
  exit
fi

out=~/Documents/hunt
mkdir -p $out
if [[ ! -d "$out" ]] ; then
  echo "FATAL: Missing output directory '$out', aborting"
  exit
fi

hunt () {
  # Hunt for search phrase $2, capturing to file $1
  # $1 = output directory
  # $2 = search phrase
  local -r f=$1/$2.out
  if [[ -f "$f" ]] ; then
    echo "WARN: Skipping, output file '$f' already exists"
  else
    echo "INFO: Hunting for '$2', writing to output file '$f'"
    $script $2 >$f
  fi
}

# Docker image
hunt $out Bitnami
hunt $out Docker
hunt $out image

# Environment
hunt $out dev
hunt $out lab
hunt $out non-prod
hunt $out nonprod
hunt $out prd
hunt $out prod
hunt $out stage
hunt $out staging
hunt $out stg

# Environment variable

# secret
hunt $out cert
hunt $out password
hunt $out secret
hunt $out SSL
hunt $out TLS

# tools and vendors
hunt $out Amazon
hunt $out Apache
hunt $out AWS
hunt $out Dell
hunt $out Hashicorp 
hunt $out Helm
hunt $out Java
hunt $out Jenkins
hunt $out K8s
hunt $out Kafka
hunt $out kubectl
hunt $out Kubernetes
hunt $out Microsoft
hunt $out nginx
hunt $out Oracle
hunt $out PHP
hunt $out Puppet
hunt $out Terraform 
hunt $out Vault 

# proper name
hunt $out Enflick
hunt $out TextNow

main() {
    # TODO: DESCRIPTION

    # TODO: CONTENT

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# export PS4='$ ' ; set -vx
# Code to debug...
# set +vx

: << 'DisabledContent'
DisabledContent

