#!/usr/bin/env bash
# Intended to be executed in a Bash shell.
# NO: set -o errexit -o nounset
set -o pipefail +o verbose +o xtrace
[[ -n "${BO_Trace}" ]] && \
    1>&2 log_trace "Executing ${BASH_SOURCE}" && \
    [[ "${BO_Trace}" == TRACE ]] && \
    1>&2 log_trace "${BASH_SOURCE}" && \
    set -o verbose -o xtrace
# NO: trap ... EXIT
###############################################################################

main() {
    # Bootstrap BriteOnyx on a new development workstation
    # $1 = directory containing extracted archive file
    log_info "Bootstrapping user '${USER}' on this workstation '$(hostname)'"
    local -r OS=$(uname)
    local -r DirTemp=$1

    maybe_backup_file "${HOME}/.bash_profile"
    maybe_backup_file "${HOME}/.spacemacs"

    distribute_archive "${DirTemp}"

    log_debug "Securing files"
    bash "${HOME}/bin/secure"

    log_debug "Updating and upgrading packages"
    # TODO: Manually install Homebrew until I can fully automate it
    # TODO: Homebrew checks for `sudo` access, so fully automate that too
    # homebrew-install
    homebrew-update
    homebrew-upgrade
    homebrew-populate

    anaconda-install
    prepare_git_access

    log_info "You may configure the editors manually by invoking 'editors-configure'"

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# NO: set -o errexit -o nounset
# export PS4='$ ' ; set -o verbose -o xtrace
# Code to debug...
# set +o verbose +o xtrace

: << 'DisabledContent'
chsh -s /bin/bash
homebrew-install
editors-configure
ssh-keygen
clone_all
jump_workstation
bash -c "source activate.bash"
DisabledContent

