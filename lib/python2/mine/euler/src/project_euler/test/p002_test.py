''' Project Euler Problem 2
REF:  http://projecteuler.net/index.php?section=problems&id=2
Created:  19-Oct-2001
Started:  08-Jun-2011
Solved:   09-Jun-2011

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
'''

import nose.tools

from project_euler.solution.generation import even

from project_euler.solution.P002 import P002

@nose.tools.raises(IndexError)
def test_invalid_index_is_rejected():
    '''Test that an invalid index is rejected.'''
    p = P002()
    p.fibonacci_term(-1)

def test_zeroth_term():
    '''Test the zeroth term of the Fibonacci sequence.'''
    p = P002()
    nose.tools.eq_(1, p.fibonacci_term(0))
    print("\nCache size is now '{0}'.".format(p.cache_size()))

def test_sum_of_given_even_terms():
    '''Test sum of given even-valued terms.'''
    p = P002()
    total  = p.fibonacci_term(2)
    total += p.fibonacci_term(5)
    total += p.fibonacci_term(8)
    nose.tools.eq_(total, sum(even(p.fibonacci(10))))
    print("\nCache size is now '{0}'.".format(p.cache_size()))

def test_given_terms():
    '''Test given terms of Fibonacci sequence.'''
    p = P002()
    nose.tools.eq_( 1, p.fibonacci_term( 1))
    nose.tools.eq_( 2, p.fibonacci_term( 2))
    nose.tools.eq_( 3, p.fibonacci_term( 3))
    nose.tools.eq_( 5, p.fibonacci_term( 4))
    nose.tools.eq_( 8, p.fibonacci_term( 5))
    nose.tools.eq_(13, p.fibonacci_term( 6))
    nose.tools.eq_(21, p.fibonacci_term( 7))
    nose.tools.eq_(34, p.fibonacci_term( 8))
    nose.tools.eq_(55, p.fibonacci_term( 9))
    nose.tools.eq_(89, p.fibonacci_term(10))
    print("\nCache size is now '{0}'.".format(p.cache_size()))

def test_sum_of_given_terms():
    '''Test sum of given first ten terms.'''
    p = P002()
    total  = p.fibonacci_term( 1)
    total += p.fibonacci_term( 2)
    total += p.fibonacci_term( 3)
    total += p.fibonacci_term( 4)
    total += p.fibonacci_term( 5)
    total += p.fibonacci_term( 6)
    total += p.fibonacci_term( 7)
    total += p.fibonacci_term( 8)
    total += p.fibonacci_term( 9)
    total += p.fibonacci_term(10)
    nose.tools.eq_(total, sum(p.fibonacci(10)))
    print("\nCache size is now '{0}'.".format(p.cache_size()))

def test_solution():
    '''Test sum(even(fibonacci_below(4000000))).'''
    p = P002()
    total = sum(even(p.fibonacci_below(4000000)))
    print("\nDesired solution is calculated to be '{0}'.".format(total))
    nose.tools.eq_(4613732, total)
    print("Cache size is now '{0}'.".format(p.cache_size()))

def test_fibonacci_below():
    '''Test fibonacci_below().'''
    p = P002()
    total  = p.fibonacci_term( 1)
    total += p.fibonacci_term( 2)
    total += p.fibonacci_term( 3)
    total += p.fibonacci_term( 4)
    total += p.fibonacci_term( 5)
    total += p.fibonacci_term( 6)
    total += p.fibonacci_term( 7)
    total += p.fibonacci_term( 8)
    total += p.fibonacci_term( 9)
    total += p.fibonacci_term(10)
    nose.tools.eq_(total, sum(p.fibonacci_below(100)))
    print("\nCache size is now '{0}'.".format(p.cache_size()))

@nose.tools.raises(RuntimeError)
def test_big_fibonacci():
    '''Test big Fibonacci term (throws upon maximum recursion depth).'''
    p = P002()
    index = 100000
    p.fibonacci_term(index)

