#!/usr/bin/env python3
"""Count file extensions within project directory, recursively.

Ignore source control subdirectories.
Ignore Python virtual environment directory.

TODO: Convert to use pathlib
TODO: Enhance to take the directory as an argument
TODO: Enhance to reference project environment variable $BO_PVE

Intended to be executed directly by the user.
"""
# Internal packages (absolute references, distributed with Python)
from os import environ
from os import path
from os import walk
from re import match

# External packages (absolute references, NOT distributed with Python)
# Library modules   (absolute references, NOT packaged, in project)
# Project modules   (relative references, NOT packaged, in project)


def prune(theDirectories, theFiles):
    remove(theDirectories, r".PVE")
    remove(theDirectories, r".git")
    remove(theDirectories, r".hg")
    remove(theDirectories, r".svn")
    remove(theDirectories, r"CVS")


def remove(theList, thePattern):
    for aValue in theList:
        if match(thePattern, aValue):
            theList.remove(aValue)


def main():
    """Script entry point."""
    aCounts = {}
    for aRoot, aDirectories, aFiles in walk(environ["BO_Project"]):
        prune(aDirectories, aFiles)
        # print("Directory '%s'" % aRoot)
        for aFile in aFiles:
            # print("File '%s'" % aFile)
            aPrefix, aExtension = path.splitext(aFile)
            if aExtension in aCounts:
                aCounts[aExtension] += 1
            else:
                aCounts[aExtension] = 1
    for aExtension in sorted(aCounts.keys()):
        print("%6u  %s" % (aCounts[aExtension], aExtension))


if __name__ == "__main__":
    main()

"""DisabledContent
"""
