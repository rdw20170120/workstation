#!/usr/bin/env bash
[[ -n "${BO_Trace}" ]] && echo "TRACE: Executing${BASH_SOURCE}"
# NO: set -e
# Intended to be executed in a BASH shell.

report_status_and_exit() {
    local -ir Status=$?
    if [[ "${Status}" -eq 0 ]] ; then
        echo "INFO:  ${0} exiting with status ${Status}"
    else
        echo "FATAL: ${0} exiting with status ${Status}"
    fi
    exit ${Status}
}
trap report_status_and_exit EXIT
###############################################################################
# Wipe project directory, which is a deeper clean

if [[ -z "$BO_Project" ]] ; then
    echo "FATAL: Environment variable 'BO_Project' is undefined, aborting"
    exit 1
fi

if [[ -z "$PVE" ]] ; then
    echo "FATAL: Environment variable 'PVE' is undefined, aborting"
    exit 1
fi

prj-clean

echo "INFO: Wiping (cleaning deeper)..."
rm -fr $BO_Project/.pytest_cache 
rm -fr $BO_Project/log 
pve-rm

# TODO: Wipe other caches such as for 'pip'

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# set -o verbose
# set -o xtrace
# Code to debug...
# set +o verbose
# set +o xtrace
: << 'DisabledContent'
DisabledContent

