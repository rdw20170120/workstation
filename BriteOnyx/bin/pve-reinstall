#!/usr/bin/env bash
[[ -n "${BO_Trace}" ]] && echo "TRACE: Executing${BASH_SOURCE}"
# NO: set -e
# Intended to be executed in a BASH shell.

report_status_and_exit() {
    local -ir Status=$?
    if [[ "${Status}" -eq 0 ]] ; then
        echo "INFO:  ${0} exiting with status ${Status}"
    else
        echo "FATAL: ${0} exiting with status ${Status}"
    fi
    exit ${Status}
}
trap report_status_and_exit EXIT
###############################################################################
# Reinstall Python virtual environment directory

if [[ -z "$BO_Project" ]] ; then
    echo "FATAL: Environment variable 'BO_Project' is undefined, aborting"
    exit 1
fi

if [[ -z "$PVE" ]] ; then
    echo "FATAL: Environment variable 'PVE' is undefined, aborting"
    exit 1
fi

echo "INFO: Reinstalling Python virtual environment directory '$PVE'"
pve-rm
pve-create

# Source Python virtual environment activation script (indirectly)
Script=$BO_Project/BriteOnyx/bin/lib/pve-activate.bash
if [[ -r $Script ]] ; then
    source $Script
else
    echo "WARN: Script file '$Script' is not readable"
fi

dep-install

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# set -o verbose
# set -o xtrace
# Code to debug...
# set +o verbose
# set +o xtrace
: << 'DisabledContent'
DisabledContent

