#!/usr/bin/env bash
# Intended to be executed in a Bash shell.
[[ -n "${BO_Trace}" ]] && 1>&2 echo "Executing ${BASH_SOURCE}" && [[ "${BO_Trace}" != 'TRACE' ]] && set -vx
# NO: set -e
trap warn_on_error EXIT
###############################################################################
[[ -z "${BO_Project}" ]] &&
    1>&2 echo "ERROR: Aborting, this project is NOT ACTIVATED" &&
    exit 99

pip_install() {
    # Install Python dependencies using PIP, smartly
    # TODO: REFACTOR: to avoid duplication

    require_value pip

    if [[ -n "${BO_RunningHumanless}" ]] ; then
        # Install WITHOUT a Python virtual environment (PVE),
        # but with user isolation
        ${pip} install --user "$@"
        abort_on_fail $? "from ${pip} install --user ..."
    else
        # Install WITH a Python virtual environment (PVE)
        ${pip} install "$@"
        abort_on_fail $? "from ${pip} install ..."
    fi

    return 0
}

main() {
    # Reinstall frozen Python dependencies
    # TODO: Enhance to allow reinstalling only essential dependencies
    require_arguments $# 0

    require_value pip

    local -r File=${BO_Project}/cfg/requirements.txt

    ${pip} --version
    abort_on_fail $? "from ${pip} --version"

    # --upgrade-strategy=eager
#   pip_install --upgrade pip wheel

    ${pip} --version
    abort_on_fail $? "from ${pip} --version"

    log_debug "Installing Python dependencies from '${File}'"
    require_file "${File}"
    # TODO: Implement
#   pip_install -r "${File}"

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# export PS4='$ ' ; set -vx
# Code to debug...
# set +vx

: << 'DisabledContent'
DisabledContent

