#!/usr/bin/env python3
"""Prompt user to manually merge generated source files.

Intended to be executed directly by the user.
"""
# Internal packages (absolute references, distributed with Python)
from filecmp import cmp
from os import environ
from os import path
from os import walk
from re import compile

# External packages (absolute references, NOT distributed with Python)
from commandlib import Command

# Library modules   (absolute references, NOT packaged, in project)
# Project modules   (relative references, NOT packaged, in project)

_debugging = False
_excluded_directory_regexes = [
    compile(r"\.BO"),
    compile(r"\.anaconda"),
    compile(r"\.cache"),
    compile(r"\.config"),
    compile(r"\.coverage"),
    compile(r"\.git"),
    compile(r"\.hg"),
    compile(r"\.pytest_cache"),
    compile(r"\.ssh"),
    compile(r"__pycache__"),
    compile(r"bin"),
    compile(r"coverage"),
    compile(r"generated"),
    compile(r"obsolete"),
    compile(r"waiting"),
]
_excluded_file_regexes = [
    # These are file extensions for types of content never likely to be interesting here
    compile(r".*\.log"),
    compile(r".*\.out"),
    compile(r"\.DS_Store"),
    # These are file extensions for types of content not yet interesting
    compile(r".*\.elv"),
    compile(r".*\.json"),
    compile(r".*\.toml"),
    compile(r".*\.vim"),
    compile(r".*\.yaml"),
    compile(r".*\.yml"),
    # These are file extensions for types of content that are already interesting
    # (so normally commented out to include them)
    # compile(r".*\.bash"),
    # compile(r".*\.md"),
    # compile(r".*\.py"),
]

_root_generate = path.join(environ["BO_DirTemp"], "generated")
_root_project = path.join(environ["BO_Project"])
_root_snapshot = path.join(environ["BO_DirSnapshot"], "generated")
_root_source = path.join(environ["BO_Project"])
_root_temporary = path.join(environ["BO_DirTemp"])


def _absolute_real_path_or_none(root, relative_path):
    result = path.abspath(path.join(root, relative_path))
    if not path.exists(result):
        result = None
    return result


def _as_bash_script(desired_files):
    """Return the desired_files as a Bash script to merge them."""
    lines = []
    lines.append("# The lines starting with `#` are comments")
    lines.append("# containing instructions for you.")
    lines.append("#")
    lines.append("# The non-comment lines are commands")
    lines.append("# that will be executed by Bash.")
    lines.append("#")
    lines.append("# Each command will invoke an editor")
    lines.append("# in which you may manually merge")
    lines.append("# a pair of files:")
    lines.append("# one is a source file")
    lines.append("# belonging to this project (repository)")
    lines.append("# and the other is a generated file")
    lines.append("# of potentially useful content.")
    lines.append("#")
    lines.append("# Edit this file, save it, and it will then be executed.")
    lines.append("# Remove (or disable) any lines containing commands")
    lines.append("# that you do not want executed.")
    lines.append("# Clear the whole file")
    lines.append("# to prevent anything from being executed.")
    lines.append("#")
    lines.append("# The first command `cd` sets the working directory")
    lines.append("# while the rest of the commands")
    lines.append("# invoke the editor")
    lines.append("# using file paths relative to that directory.")
    lines.append("")
    lines.append("# SO, do NOT delete or disable this command")
    lines.append("# UNLESS you delete or disable ALL the commands.")
    lines.append(f"cd {_root_project}")
    lines.append("")
    for k, v in desired_files.items():
        (source, generate, snapshot) = v
        lines.append(
            _merge_command_for(
                _relative_real_path_or_none(_root_project, source),
                _relative_real_path_or_none(_root_project, generate),
            )
        )
    return "\n".join(lines)


def _debug(message):
    if _debugging:
        print(message)


def _dump_files_dictionary(dict_):
    _debug(f"Files dictionary contains {len(dict_)} items:")
    for k, v in dict_.items():
        # _debug(f"relative path: {k}")
        (source, generate, snapshot) = v
        _debug(f"source: {source}, generate: {generate}, snapshot: {snapshot}")


def _edit_file(file_):
    _info(f"Editing file '{file_}'")
    Command("vim").in_dir(str(_root_project)).with_trailing_args(str(file_)).run()


def _execute_file(file_):
    _info(f"Executing file '{file_}'")
    Command("bash").in_dir(str(_root_project)).with_trailing_args(str(file_)).run()


def _file_triple(file_relative_path):
    """Return a tuple
    of the source files
    associated with the file_relative_path.
    """
    _debug(f"Adding relative file '{file_relative_path}'")
    return (
        _absolute_real_path_or_none(_root_source, file_relative_path),
        _absolute_real_path_or_none(_root_generate, file_relative_path),
        _absolute_real_path_or_none(_root_snapshot, file_relative_path),
    )


def _info(message):
    print(message)


def _merge_command_for(source, generate):
    result = "vim -d"
    result += "" if generate is None else f" {generate}"
    result += "" if source is None else f" {source}"
    return result


def _merge_file_dicts(generated_files, source_files):
    result = {}
    result.update(generated_files)
    result.update(source_files)
    return result


def _prune_excluded_items(items, regexes):
    """Prune (remove) any items that match any of the regexes."""
    # Iterate over a copy of the list to avoid mutation errors
    for i in items[:]:
        for r in regexes:
            if not r.fullmatch(i) is None:
                # _debug(f"Removing '{i}' due to '{r}'")
                items.remove(i)


def _relative_real_path_or_none(root, absolute_path):
    if absolute_path is None:
        return None
    if not path.exists(absolute_path):
        result = None
    if not path.isabs(absolute_path):
        raise ValueError(f"Not an absolute path: '{absolute_path}'")
    return path.relpath(absolute_path, start=root)


def _scanned_files(root):
    """Scan the directory tree from root, returning any desired source files found."""
    result = {}
    for top, directories, files in walk(root):
        _prune_excluded_items(directories, _excluded_directory_regexes)
        _prune_excluded_items(files, _excluded_file_regexes)
        for f in files:
            absolute = path.realpath(path.join(top, f), strict=True)
            relative = path.relpath(absolute, start=root)
            result[str(relative)] = _file_triple(relative)
    return result


def _should_merge_file(file_relative_path, file_triple):
    """Return whether the user should be asked
    to manually merge the files at file_relative_path."""
    (source, generate, snapshot) = file_triple
    # _debug(f"file triple:  source='{source}', generate='{generate}', snapshot='{snapshot}'")
    if source is None:
        # Without source, cannot merge
        _info(f"source is missing:  generate='{generate}', snapshot='{snapshot}'")
        return False
    elif generate is None:
        # Without generate, cannot merge
        # _debug(f"generate is missing:  source='{source}', snapshot='{snapshot}'")
        return False
    elif cmp(generate, source, shallow=False):
        # If generate is same as source,
        # the merge is unnecessary
        # _debug(f"Generated is same as source:  source='{source}'")
        return False
    elif snapshot is None:
        # Without snapshot, assume new generate never before merged (or complete reset)
        _debug(f"Merging '{generate}' into '{source}'")
        return True
    else:
        # With all three present, consider merge
        # _debug(f"all present:  source='{source}', generate='{generate}', snapshot='{snapshot}'")
        if cmp(generate, snapshot, shallow=False):
            # If generate is NOT same as source,
            # but snapshot is same as generate,
            # then assume merge has already been performed
            # since user snapshotted the generated source
            # _debug(f"Snapshotted is same as generate:  source='{source}'")
            return False
        else:
            # If generate is NOT same as source,
            # and snapshot is NOT same as generate,
            # merge
            _debug(f"Merging '{generate}' into '{source}'")
            return True
    # Should never reach here
    return False


def _write_file(text_content, file_):
    with open(file_, encoding="utf_8", mode="wt", newline=None) as writer:
        count = writer.write(text_content)
    _info(f"Wrote {count} characters to file '{file_}'")


def main():
    """Script entry point."""
    # No need to scan generated source
    # that has been snapshotted (`_root_snapshot`),
    # because such orphans will be discarded
    # upon the next run of `gen-snapshot`
    generated_files = _scanned_files(_root_generate)
    _info(f"Generated files dict contains {len(generated_files)} files")
    source_files = _scanned_files(_root_source)
    _info(f"Source files dict contains {len(source_files)} files")
    desired_files = _merge_file_dicts(generated_files, source_files)
    _info(f"Desired files dict contains {len(desired_files)} files")
    desired_files = {k: v for k, v in desired_files.items() if _should_merge_file(k, v)}
    _info(f"Desired files dict contains {len(desired_files)} files")
    # _dump_files_dict(desired_files)

    script = path.join(_root_temporary, "edit_generated_files_merge")
    content = _as_bash_script(desired_files)
    _debug(f"As Bash script:\n{content}")
    _write_file(content, script)
    _edit_file(script)
    _execute_file(script)


if __name__ == "__main__":
    main()

"""DisabledContent
"""
