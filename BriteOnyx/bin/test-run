#!/usr/bin/env bash
# Intended to be executed in a Bash shell.
[[ -n "${BO_Trace}" ]] && 1>&2 echo "Executing ${BASH_SOURCE}" && [[ "${BO_Trace}" != 'TRACE' ]] && set -vx
# NO: set -e
trap warn_on_error EXIT
###############################################################################
[[ -z "${BO_Project}" ]] &&
    1>&2 echo "ERROR: Aborting, this project is NOT ACTIVATED" &&
    exit 99

run_coverage() {
    # Run Python coverage on previous pytest data
    # $1 = Python coverage configuration file
    require_file "$1"

    require_command python3

    python3 -m coverage html --rcfile=$1
    abort_on_fail $? "from python3 -m coverage html ..."
    python3 -m coverage report --rcfile=$1
    abort_on_fail $? "from python3 -m coverage report ..."
}

run_pytest() {
    # Run pytest on test suite known as $1 in directory $2
    # $1 = Python coverage configuration file
    # $2 = test suite name
    # $3 = test suite parent directory
    require_file "$1"
    require_value "$2"
    require_directory "$3"

    cd $3 ; abort_on_fail $? "from cd"

    require_command python3

    python3 -m pytest \
	--cov=$3 \
	--cov-append \
	--cov-config=$1 \
	--cov-report= \
        --log-file=${BO_Project}/log/pytest-$2.log
    abort_on_fail $? "from python3 -m pytest ..."
}

main() {
    # Run Python test suites
    local -r Config=${BO_Project}/cfg/.coveragerc

    require_command python3

    python3 -m coverage erase --rcfile=${Config}
    abort_on_fail $? "from python3 -m coverage erase ..."

    run_pytest   ${Config} mine ${BO_Project}/src/lib/mine
    run_pytest   ${Config} gen  ${BO_Project}/src/gen
    run_pytest   ${Config} app  ${BO_Project}/src/app

    if [[ -z "${BO_RunningHumanless}" ]] ; then
        cd ${BO_Project}/src ; abort_on_fail $? "from cd"
        run_coverage ${Config}
    fi

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# export PS4='$ ' ; set -vx
# Code to debug...
# set +vx

: << 'DisabledContent'
DisabledContent

