#!/usr/bin/env bash
[[ -n "${BO_Debug}" ]] && 1>&2 echo "Executing ${BASH_SOURCE}"
# NO: set -e
# Intended to be executed in a BASH shell.
trap warn_on_error EXIT
###############################################################################
[[ -z "${BO_Project}" ]] &&
    log_error "Aborting, this project is NOT ACTIVATED" &&
    exit 99

if [[ -z "$PVE" ]] ; then
    log_error "Environment variable 'PVE' is undefined, aborting"
    exit 1
fi

findAnd() {
    # Find and perform action $1 on files within directory $2 matching pattern $3
    # $1 = action to perform, either 'delete' or 'print'
    # $2 = directory in which to work
    # $3 = filename pattern to match
    find $2 \
	-not -path "$BO_Project/.git/*" \
	-and -not -path "$PVE/*" \
	-and -name "$3" \
	-and -type f \
	-$1
}

log_debug "Found these files..."
findAnd print $BO_Project '*.bak'
findAnd print $BO_Project '*.log'
findAnd print $BO_Project '*.pyc'
findAnd print $BO_Project '__pycache__'

log_debug "Deleting files..."
findAnd delete $BO_Project '*.bak'
findAnd delete $BO_Project '*.pyc'
findAnd delete $BO_Project '__pycache__'

_file=$BO_Project/src/app/pytest.log
[[ -f "$_file" ]] && log_debug "Deleting file '$_file'" && rm $_file
_file=$BO_Project/src/gen/pytest.log
[[ -f "$_file" ]] && log_debug "Deleting file '$_file'" && rm $_file
_file=$BO_Project/src/lib/mine/pytest.log
[[ -f "$_file" ]] && log_debug "Deleting file '$_file'" && rm $_file
_file=$BO_Project/src/lib/third_party/pytest.log
[[ -f "$_file" ]] && log_debug "Deleting file '$_file'" && rm $_file

log_warn "Found these files REMAINING..."
findAnd print $BO_Project '*.bak'
findAnd print $BO_Project '*.log'
findAnd print $BO_Project '*.pyc'
findAnd print $BO_Project '__pycache__'

main() {
    # Clean project directory

    # TODO: CONTENT

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# export PS4='$ ' ; set -o verbose ; set -o xtrace
# Code to debug...
# set +o verbose ; set +o xtrace
: << 'DisabledContent'
DisabledContent

