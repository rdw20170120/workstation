#!/usr/bin/env bash
set -e
# DISABLED: set -x
# Intended to be executed directly by the user.
###############################################################################
# Clean project directory

# TODO: Enhance to handle directories

if [[ -z "$BO_Project" ]] ; then
    echo "FATAL: Environment variable 'BO_Project' is undefined, aborting"
    exit 1
fi

if [[ -z "$PVE" ]] ; then
    echo "FATAL: Environment variable 'PVE' is undefined, aborting"
    exit 1
fi

findAnd() {
    # Find and perform action $1 on files within directory $2 matching pattern $3
    # $1 = action to perform, either 'delete' or 'print'
    # $2 = directory in which to work
    # $3 = filename pattern to match
    find $2 \
	-not -path "$BO_Project/.git/*" \
	-and -not -path "$PVE/*" \
	-and -name "$3" \
	-and -type f \
	-$1
}

echo "INFO: Found these files..."
findAnd print $BO_Project '*.bak'
findAnd print $BO_Project '*.log'
findAnd print $BO_Project '*.pyc'
findAnd print $BO_Project '.pytest_cache'
findAnd print $BO_Project '__pycache__'

echo "INFO: Deleting files..."
findAnd delete $BO_Project '*.bak'
findAnd delete $BO_Project '*.pyc'
findAnd delete $BO_Project '.pytest_cache'
findAnd delete $BO_Project '__pycache__'

_file=$BO_Project/src/pytest.log
[[ -f "$_file" ]] \
    && echo "INFO: Deleting file '$_file'" \
    && rm $_file

echo "WARN: Found these files REMAINING..."
findAnd print $BO_Project '*.bak'
findAnd print $BO_Project '*.log'
findAnd print $BO_Project '*.pyc'
findAnd print $BO_Project '.pytest_cache'
findAnd print $BO_Project '__pycache__'

###############################################################################
: << 'DisabledContent'
DisabledContent

