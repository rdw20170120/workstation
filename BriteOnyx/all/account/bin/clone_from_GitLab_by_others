#!/usr/bin/env bash
# Intended to be executed in a Bash shell.
[[ -n "${BO_Trace}" ]] && 1>&2 log_trace "Executing ${BASH_SOURCE}" && [[ "${BO_Trace}" != 'TRACE' ]] && set -vx
# NO: set -e
# NO: trap ... EXIT
###############################################################################
# Clone git repositories, if they have not been cloned already.
# NOTE: I reference my special SSH configuration to handle the connection, see `~/.ssh/config`.
# TODO: Implement this:
# hint:   git config pull.ff only       # fast-forward only

_Script=${HOME}/bin/lib/declare/git.bash
prepare_to_source "${_Script}" && source "${_Script}"
unset _Script

clone_for_Elvish() {
    maybe_clone "${Dir}/other/zzamboni" "${Connection}:zzamboni" dot-elvish
}

clone_for_Emacs() {
    maybe_clone "${Dir}/other/zzamboni" "${Connection}:zzamboni" dot-emacs
}

main() {
    # Clone others' repositories on GitLab
    local -r Source=GitLab
    local -r Connection=MeAt${Source}
    local -r Dir=${HOME}/repo/${Source}

#   clone_for_Elvish
#   clone_for_Emacs

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# export PS4='$ ' ; set -vx
# Code to debug...
# set +vx

: << 'DisabledContent'
DisabledContent

