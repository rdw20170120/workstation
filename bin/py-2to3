#!/usr/bin/env bash
set -e
# This script is intended to be executed by a user in a BASH shell.

# Convert all Python source from Python2 to Python3

if [[ -z "$DirProject" ]] ; then
    echo "FATAL: Environment variable 'DirProject' is undefined, aborting"
    exit 1
fi

# NOTE: Apparently, it is not possible to run Python3 code exclusively with the
# .py3 file extension, so do not add a '3' suffix to the source files.

# NOTE: The 2to3 tool throws a parsing error sometimes, which requires careful
# effort to hunt down and fix manually in the Python2 code.

# Therefore, I STRONGLY recommend that one works through this conversion
# process incrementally.
#  1.  Ensure that you are starting with a clean checkout from the source
#      control repository.  If anything goes wrong in the following
#      steps, you can revert back.
#  2.  Start by disabling (commenting out) writing back to the source files.
#  3.  Disable the 'all' transformation.
#  4.  Enable the '-p' print function transformation.
#  5.  Disable every optional fix transformations.
#  6.  Look at the command output for problems, hunt them down in the Python2
#      source files, and fix them.  Continue until the output is clean.  In
#      particular, fix any 'ParseError's that arise.  It appears that only this
#      transformation produces a ParseError.
#  7.  Enable write back to the source files.
#  8.  Save the conversions to the source files.  I suggest commiting these
#      file changes before proceeding.
#  9.  Disable writing back to the source files again.
# 10.  Enable the 'all' transformation.
# 11.  Disable the '-p' print function transformation.
# 12.  Disable the optional fix transformations.
# 13.  Look at the command output for problems, hunt them down in the Python2
#      source files, and fix them.  Continue until the output is clean.  In
#      particular, fix any 'ParseError's that arise.
# 14.  Disable the 'all' transformation.
# 15.  Disable the '-p' print function transformation.
# 16.  One by one, enable the optional fix transformations.
# 17.  Look at the command output for problems, hunt them down in the Python2
#      source files, and fix them.  Continue until the output is clean.
# 18.  Enable write back to the source files.
# 19.  Save the conversions to the source files.  I suggest commiting these
#      file changes too.
# 20.  When the process is done, leave this script as you found it: writing
#      back should be disabled, while ONLY the 'all' transformation should be
#      enabled.

convert () {
    # Convert Python2 source files to Python3 within directory $1
    # $1 = directory within which to work

    local cmd="2to3"
    # NO: cmd+=" --add-suffix=3"
    cmd+=" --verbose"
    # Write back to source files
    cmd+=" -nw --no-diffs"
    # All safe bulk transformations
    cmd+=" --fix=all"
    # Optional not-so-safe transformations
#   cmd+=" -p"
#   cmd+=" --fix=buffer"
#   cmd+=" --fix=idioms"
#   cmd+=" --fix=set_literal"
#   cmd+=" --fix=ws_comma"
    # Execute tool, but filter out the noise
    $cmd $1 2>&1 \
        | grep -v 'Adding transformation' \
        | grep -v 'Descending into' \
        | grep -v 'No changes' \
        | grep -v 'Refactoring ' \
        | grep -v 'write-unchanged-files' \
        | grep -v 'Wrote changes'
}

# These directories should have Python3 source files in them
# But $DirProject/lib/python2 should remain as Python2 source (until deleted)
convert $DirProject/bin
convert $DirProject/lib/mine
convert $DirProject/lib/third_party
convert $DirProject/src

