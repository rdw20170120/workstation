#!/usr/bin/env bash
[[ -n "${BO_Debug}" ]] && 1>&2 echo "DEBUG: Executing ${BASH_SOURCE}"
# NO: set -e
# Intended to be executed in a BASH shell.

report_status_and_exit() {
    local -ir Status=$?
    [[ "${Status}" -ne 0 ]] && 
        1>&2 echo "FATAL: ${0} exiting with status ${Status}"
    exit ${Status}
}
trap report_status_and_exit EXIT
###############################################################################
# Report tool status

[[ -z "${BO_Project}" ]] && 
    1>&2 echo "FATAL: This project is NOT ACTIVATED, aborting" && 
    exit 99

Rule=##########

check() {
    echo $Rule
    echo $1
    $1
}

checkExecutable() {
    check "type $1"
    check "which $1"
}

checkVariable() {
    echo $Rule
    echo "$1=$2"
}

# operating system
checkExecutable uname
if [[ "$(uname)" -eq 'Darwin' ]] ; then
    # NOTE: This works on macOS
    check 'uname -a'
else
    # NOTE: This works on Ubuntu
    check 'uname --all'
fi
checkVariable PATH "$PATH"

# BASH
checkExecutable bash
check 'bash --version'

# compgen
check 'compgen -a'
check 'compgen -b'
check 'compgen -c'
check 'compgen -e'
check 'compgen -g'
check 'compgen -k'

# Git
checkExecutable git
check 'git --version'

# Homebrew
checkExecutable brew
check 'brew --version'
check 'brew list --full-name --versions --casks'
check 'brew list --full-name --versions --formulae'

# Python shared
checkExecutable python
check 'python --version'
checkVariable PYTHONPATH "$PYTHONPATH"

# Python 2
checkExecutable python2
check 'python2 --version' 2>&1
echo $Rule
python2 -c 'import platform; print(platform.python_version())'
echo $Rule
python2 -c 'import os; print(os.sys.path)'
checkExecutable pip
check 'pip --version'

# Python 3
checkExecutable python3
check 'python3 --version'
echo $Rule
python3 -c 'import platform; print(platform.python_version())'
echo $Rule
python3 -c 'import os; print(os.sys.path)'
checkExecutable pip3
check 'pip3 --version'

# Python tools
checkExecutable 2to3
checkExecutable black
check 'black --version'
checkExecutable coverage
check 'coverage --version'
checkExecutable py.test
checkExecutable pytest
check 'pytest --version' 2>&1

main() {
    # TODO: DESCRIPTION

    # TODO: CONTENT

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# set -o verbose
# set -o xtrace
# Code to debug...
# set +o verbose
# set +o xtrace
: << 'DisabledContent'
# AWS CLI
checkExecutable aws
check 'aws --version'

# Kubernetes 
checkExecutable kubectl
check 'kubectl version'

# OpenSSL 
checkExecutable openssl
check 'openssl version -a'
check 'openssl list-cipher-algorithms'
check 'openssl list-cipher-commands'
check 'openssl list-message-digest-algorithms'
check 'openssl list-message-digest-commands'
check 'openssl list-public-key-algorithms'
check 'openssl list-standard-commands'

# Oracle Java
checkExecutable java
check 'java --version'
checkExecutable keytool
check 'keytool -showinfo -tls'

# Python OpenSSL
check 'python -m OpenSSL.debug'

DisabledContent

