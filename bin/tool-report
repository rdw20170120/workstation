#!/usr/bin/env bash
# NO: set -e
# DISABLED: set -x
# Intended to be executed directly by the user.
###############################################################################
# Report tool status

Rule=##########

check() {
    echo $Rule
    echo $1
    $1
}

checkExecutable() {
    check "type $1"
    check "which $1"
}

checkVariable() {
    echo $Rule
    echo "$1=$2"
}

# operating system
if [[ "$(uname)" -eq 'Darwin' ]] ; then
    # NOTE: This works on macOS
    check 'uname -a'
else
    # NOTE: This works on Ubuntu
    check 'uname --all'
fi
checkExecutable uname
checkVariable PATH "$PATH"

# BASH
check 'bash --version'
checkExecutable bash

# Git
check 'git --version'
checkExecutable git

# OpenSSL 
check 'openssl version -a'
check 'openssl list-cipher-algorithms'
check 'openssl list-cipher-commands'
check 'openssl list-message-digest-algorithms'
check 'openssl list-message-digest-commands'
check 'openssl list-public-key-algorithms'
check 'openssl list-standard-commands'
checkExecutable openssl

# Python shared
check 'python --version'
checkExecutable python
checkVariable PYTHONPATH "$PYTHONPATH"

# Python 2
check 'pip --version'
checkExecutable pip
check 'python2 --version' 2>&1
checkExecutable python2
echo $Rule
python2 -c 'import platform; print(platform.python_version())'
echo $Rule
python2 -c 'import os; print(os.sys.path)'

# Python 3
check 'pip3 --version'
checkExecutable pip3
check 'python3 --version'
checkExecutable python3
echo $Rule
python3 -c 'import platform; print(platform.python_version())'
echo $Rule
python3 -c 'import os; print(os.sys.path)'

# Python 2to3
checkExecutable 2to3

# Python testing
check 'py.test --version' 2>&1
checkExecutable py.test

# AWS CLI
check 'aws --version'
checkExecutable aws

# Python OpenSSL
check 'python -m OpenSSL.debug'

# Ensure a successful script return
echo "Tool report succeeded, though individual checks may fail"
exit 0

###############################################################################
: << 'DisabledContent'
DisabledContent

