#!/usr/bin/env bash
[[ -n "${BO_Debug}" ]] && 1>&2 echo "DEBUG: Executing ${BASH_SOURCE}"
# NO: set -e
# Intended to be executed in a BASH shell.

report_status_and_exit() {
    local -ir Status=$?
    [[ "${Status}" -ne 0 ]] && 
        1>&2 echo "FATAL: ${0} exiting with status ${Status}"
    exit ${Status}
}
trap report_status_and_exit EXIT
###############################################################################

[[ -z "${BO_Project}" ]] && 
    1>&2 echo "FATAL: This project is NOT ACTIVATED, aborting" && 
    exit 99

main() {
    # List files that are ignored by source control but MAY be wrongly left out
    git status --ignored |
        grep -v BO-incoming\.env |
        grep -v BO-outgoing\.env |
        grep -v \.DS_Store |
        grep -v \.PVE |
        grep -v \.cache\/ |
        grep -v \.class |
        grep -v \.html |
        grep -v \.pytest_cache |
        grep -v __pycache__ |
        grep -v cfg\/\.coverage |
        grep -v context\.bash |
        grep -v htmlcov\/ |
        grep -v log\/ |
        grep -v pytest\.log

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# set -o verbose
# set -o xtrace
# Code to debug...
# set +o verbose
# set +o xtrace
: << 'DisabledContent'
DisabledContent

