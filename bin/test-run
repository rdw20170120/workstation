#!/usr/bin/env bash
[[ -n "${BO_Trace}" ]] && echo "TRACE: Executing${BASH_SOURCE}"
# NO: set -e
# Intended to be executed in a BASH shell.

report_status_and_exit() {
    local -ir Status=$?
    if [[ "${Status}" -eq 0 ]] ; then
        echo "INFO:  ${0} exiting with status ${Status}"
    else
        echo "FATAL: ${0} exiting with status ${Status}"
    fi
    exit ${Status}
}
trap report_status_and_exit EXIT
###############################################################################
# Run tests

[[ -z "${BO_Project}" ]] &&
    echo "FATAL: 'BO_Project' is undefined, aborting" &&
    exit 20

Script=$BO_Project/BriteOnyx/bin/lib/configure-Python.bash
if [[ -r $Script ]] ; then
    source $Script
else
    echo "WARN: Script file '$Script' is not readable"
fi

cd $BO_Project/src/lib/mine
status=$? ; [[ ${status} -ne 0 ]] && exit ${status}
# DISABLED: --show-capture=no
py.test --log-file=pytest.log
status=$? ; [[ ${status} -ne 0 ]] && exit ${status}

cd $BO_Project/src/gen
status=$? ; [[ ${status} -ne 0 ]] && exit ${status}
# DISABLED: --show-capture=no
py.test --log-file=pytest.log
status=$? ; [[ ${status} -ne 0 ]] && exit ${status}

cd $BO_Project/src/app
status=$? ; [[ ${status} -ne 0 ]] && exit ${status}
# DISABLED: --show-capture=no
py.test --log-file=pytest.log
status=$? ; [[ ${status} -ne 0 ]] && exit ${status}

main() {
    return 0
}

main

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# set -o verbose
# set -o xtrace
# Code to debug...
# set +o verbose
# set +o xtrace
: << 'DisabledContent'
DisabledContent

