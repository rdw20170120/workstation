#!/usr/bin/env bash
[[ -n "${BO_Trace}" ]] && echo "TRACE: Executing${BASH_SOURCE}"
# NO: set -e
# Intended to be executed in a BASH shell.

report_status_and_exit() {
    local -ir Status=$?
    if [[ "${Status}" -eq 0 ]] ; then
        echo "INFO:  ${0} exiting with status ${Status}"
    else
        echo "FATAL: ${0} exiting with status ${Status}"
    fi
    exit ${Status}
}
trap report_status_and_exit EXIT
###############################################################################

[[ -z "${BO_Project}" ]] &&
    echo "FATAL: 'BO_Project' is undefined, aborting" &&
    exit 20

Script=${BO_Project}/BriteOnyx/bin/lib/configure-Python.bash
if [[ -r ${Script} ]] ; then
    source ${Script}
else
    echo "WARN: Script file '${Script}' is not readable"
fi

run_pytest() {
    # Run pytest on test suite known as $1 in directory $2
    # $1 = test suite name
    # $2 = test suite parent directory
    local -i Status
    cd $2
    Status=$? ; [[ ${Status} -ne 0 ]] && exit ${Status}
    pytest \
	--cov=$2 \
	--cov-branch \
	--cov-config=${BO_Project}/cfg/.coveragerc \
	--cov-report=html \
        --html=${BO_Project}/out/pytest-$1.html \
        --log-file=${BO_Project}/log/pytest-$1.log \
	--no-cov-on-fail \
	--self-contained-html
    Status=$? ; [[ ${Status} -ne 0 ]] && exit ${Status}
}

main() {
    # Run Python test suites
    # TODO: Separate coverage generation into consolidated step
    run_pytest mine ${BO_Project}/src/lib/mine
    run_pytest gen  ${BO_Project}/src/gen
    run_pytest app  ${BO_Project}/src/app
    coverage report --rcfile=${BO_Project}/cfg/.coveragerc
    Status=$? ; [[ ${Status} -ne 0 ]] && exit ${Status}
    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# set -o verbose
# set -o xtrace
# Code to debug...
# set +o verbose
# set +o xtrace
: << 'DisabledContent'
--show-capture=no
DisabledContent

