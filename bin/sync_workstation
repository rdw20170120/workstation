#!/usr/bin/env bash
# Intended to be executed in a Bash shell.
[[ -n "${BO_Trace}" ]] && 1>&2 echo "Executing ${BASH_SOURCE}" && [[ "${BO_Trace}" != 'TRACE' ]] && set -vx
# NO: set -e
# NO: trap ... EXIT
###############################################################################
[[ -z "${BO_Project}" ]] &&
    1>&2 echo "ERROR: Aborting, this project is NOT ACTIVATED" &&
    exit 99

my_vim() {
    # Return absolute path to my Vim
    local -r PathNvim="$(which nvim)"
    local -r PathVi="$(which vi)"
    local -r PathVim="$(which vim)"

    if [[ -n "${PathNvim}" ]]; then
        echo -n "${PathNvim}"
    elif [[ -n "${PathVim}" ]]; then
        echo -n "${PathVim}"
    else
        echo -n "${PathVi}"
    fi

    return 0
}

sync_directory() {
    # Synchronize directory trees
    # TODO: REFACTOR into BriteOnyx Bash declarations
    require_arguments $# 2
    require_variable MyVim
    local -r DirTarget=$1
    local -r DirSource=$2

    if [[ -d "${DirSource}" ]] ; then
        log_info "Synchronizing directories '${DirTarget}' and '${DirSource}'"
        maybe_create_directory_tree "${DirTarget}"
        ${MyVim} -c "DirDiff ${DirTarget} ${DirSource}"
    else
        log_warn "Skipped missing directory '${DirSource}'"
    fi
}

sync_file() {
    # Synchronize file
    require_arguments $# 3
    local -r DirTarget=$1
    local -r DirSource=$2
    local -r File=$3

    sync_files "${DirTarget}/${File}" "${DirSource}/${File}"
}

sync_files() {
    # Synchronize files $1 and $2
    require_arguments $# 2
    require_variable MyVim
    local -r Diff="diff -aNq"
    local -r FileTarget=$1
    local -r FileSource=$2

    if [[ ! -e "${FileSource}" ]]; then
        log_debug "Skipped missing file '${FileSource}'"
        return 0
    fi
    if [[ ! -e "${FileTarget}" ]]; then
        log_debug "Skipped missing file '${FileTarget}'"
        return 0
    fi
    if ${Diff} "${FileTarget}" "${FileSource}"; then
        log_debug "Skipped same files '${FileTarget}' and '${FileSource}'"
    else
        log_info "Synchronizing files '${FileTarget}' and '${FileSource}'"
        ${MyVim} -d "${FileTarget}" "${FileSource}"
    fi
}

sync_home() {
    # Synchronize relevant files & directories
    # in the user's HOME directory
    # with those captured in directory $1 of this project
    require_arguments $# 1
    require_directory_in HOME
    local -r Dir=$1

    log_info "Synchronizing workstation with content captured in '${Dir}'"
    require_directory "${Dir}"

    sync_directory "${HOME}/.config/nvim" "${Dir}/.config/nvim"
    sync_directory "${HOME}/.local"       "${Dir}/.local"
    sync_directory "${HOME}/.vim"         "${Dir}/.vim"
    sync_directory "${HOME}/bin"          "${Dir}/bin"

    sync_file "${HOME}" "${Dir}" .bash_logout
    sync_file "${HOME}" "${Dir}" .bash_profile
    sync_file "${HOME}" "${Dir}" .bashrc
    sync_file "${HOME}" "${Dir}" .condarc
    sync_file "${HOME}" "${Dir}" .inputrc
    sync_file "${HOME}" "${Dir}" .profile
    sync_file "${HOME}" "${Dir}" .spacemacs
    sync_file "${HOME}" "${Dir}" .vimrc
    sync_file "${HOME}" "${Dir}" alias.bash

    sync_file "${HOME}/.ssh" "${Dir}/.ssh" config
}

main() {
    # Synchronize relevant files & directories
    # against home directory tree
    # on local workstation
    require_arguments $# 0
    require_variable BO_OS
    require_directory_in BO_Project
    local -r DirHome=${BO_Project}/home
    local -r MyVim="$(my_vim)"

    sync_directory "${HOME}/bin" "${DirHome}/${BO_OS}/bin"
    sync_directory "${HOME}/bin" "${DirHome}/shared/bin"
    sync_directory "${HOME}/bin" "${DirHome}/customer/bin"
    sync_home "${DirHome}/${BO_OS}"
    sync_home "${DirHome}/customer"
    sync_home "${DirHome}/shared"

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# export PS4='$ ' ; set -vx
# Code to debug...
# set +vx

: << 'DisabledContent'
DisabledContent

