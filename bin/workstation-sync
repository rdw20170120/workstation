#!/usr/bin/env bash
# Intended to be executed in a Bash shell.
[[ -n "${BO_Trace}" ]] && 1>&2 echo "Executing ${BASH_SOURCE}" && [[ "${BO_Trace}" != 'TRACE' ]] && set -vx
# NO: set -e
# NO: trap ... EXIT
###############################################################################
[[ -z "${BO_Project}" ]] &&
    1>&2 echo "ERROR: Aborting, this project is NOT ACTIVATED" &&
    exit 99

sync_directory() {
    # Synchronize directory trees
    require_arguments $# 2
    local -r DirTarget=$1
    local -r DirSource=$2

    # TODO: Create BO_cmd_vim variable to reference Vim
    if [[ -d "${DirSource}" ]] ; then
        log_info "Synchronizing directories '${DirTarget}' and '${DirSource}'"
        maybe_create_directory_tree "${DirTarget}"
        vim -c "DirDiff ${DirTarget} ${DirSource}"
    else
        log_warn "Missing directory '${DirSource}', skipping"
    fi
}

sync_file() {
    # Synchronize file
    require_arguments $# 3
    local -r DirTarget=$1
    local -r DirSource=$2
    local -r File=$3

    # TODO: Create BO_cmd_vim variable to reference Vim
    if [[ -f "${DirSource}/${File}" ]] ; then
        log_info "Synchronizing files '${DirTarget}/${File}' and '${DirSource}/${File}'"
        maybe_create_directory_tree "${DirTarget}"
        vimdiff "${DirTarget}/${File}" "${DirSource}/${File}"
    else
        log_warn "Missing file '${DirSource}/${File}', skipping"
    fi
}

main() {
    # Synchronize relevant files & directories
    # against home directory tree
    # on local workstation
    require_arguments $# 0
    require_variable BO_OS
    local Dir

    log_info "Synchronizing workstation (non-operating-system-specific)"
    Dir=${BO_Project}/home/shared

    sync_directory "${HOME}/.config" "${Dir}/.config"
    sync_directory "${HOME}/.local"  "${Dir}/.local"
    sync_directory "${HOME}/.ssh"    "${Dir}/.ssh"
    sync_directory "${HOME}/.vim"    "${Dir}/.vim"
    sync_directory "${HOME}/bin"     "${Dir}/bin"

    sync_file "${HOME}" "${Dir}" .bashrc
    sync_file "${HOME}" "${Dir}" .condarc
    sync_file "${HOME}" "${Dir}" .inputrc
    sync_file "${HOME}" "${Dir}" alias.bash

    log_info "Synchronizing workstation (${BO_OS}-specific)"
    Dir=${BO_Project}/home/${BO_OS}

    sync_directory "${HOME}/.config" "${Dir}/.config"
    sync_directory "${HOME}/.local"  "${Dir}/.local"
    sync_directory "${HOME}/.vim"    "${Dir}/.vim"
    sync_directory "${HOME}/bin"     "${Dir}/bin"

    sync_file "${HOME}" "${Dir}" .bash_logout
    sync_file "${HOME}" "${Dir}" .bash_profile
    sync_file "${HOME}" "${Dir}" .bashrc
    sync_file "${HOME}" "${Dir}" .profile
    sync_file "${HOME}" "${Dir}" .spacemacs
    sync_file "${HOME}" "${Dir}" .vimrc
    sync_file "${HOME}" "${Dir}" alias.bash

    return 0
}

main $@

###############################################################################
# NOTE: Uncomment these lines for debugging, placed where needed
# export PS4='$ ' ; set -vx
# Code to debug...
# set +vx

: << 'DisabledContent'
    [[ ! -e "${DirSource}/${File}" ]] && touch "${DirSource}/${File}"
    [[ ! -e "${DirTarget}/${File}" ]] && touch "${DirTarget}/${File}"
DisabledContent

